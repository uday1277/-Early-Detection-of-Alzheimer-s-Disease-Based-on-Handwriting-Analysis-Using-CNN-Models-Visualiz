import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import accuracy_score, confusion_matrix

# 1. Load dataset
df = pd.read_csv("/content/data (3).csv")  # ðŸ”¹ Replace with your actual file

# 2. Preprocess the data
# ðŸ”¹ Drop unnecessary columns like IDs (Modify column name accordingly)
if 'id' in df.columns:
    df = df.drop(columns=['id'])

# ðŸ”¹ Encode categorical columns
for col in df.select_dtypes(include=['object']).columns:
    df[col] = LabelEncoder().fit_transform(df[col])

# ðŸ”¹ Extract features and target
X = df.iloc[:, :-1].values  # Features
y = df.iloc[:, -1].values   # Target

# ðŸ”¹ Convert target to one-hot encoding (for multi-class classification)
y = to_categorical(y)

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train.astype(float))  # Explicitly convert to float
X_test = scaler.transform(X_test.astype(float))

# ðŸ”¹ Reshape input for Conv1D (assuming features as 1D signals)
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# 5. Build CNN Model
model = Sequential([
    Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)),
    MaxPooling1D(pool_size=2),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(y.shape[1], activation='softmax')  # Output layer for classification
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 6. Train the model
history = model.fit(X_train, y_train, epochs=20, validation_data=(X_test, y_test), batch_size=16)

# 7. Evaluate on test set
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy:.4f}")

# 8. Predict and Measure Accuracy
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_test_classes = np.argmax(y_test, axis=1)

manual_accuracy = accuracy_score(y_test_classes, y_pred_classes)
print(f"Manual Test Accuracy: {manual_accuracy:.4f}")

# 9. Confusion Matrix Visualization
conf_matrix = confusion_matrix(y_test_classes, y_pred_classes)

plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Healthy', 'Unhealthy'], yticklabels=['Healthy', 'Unhealthy'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10. Bar Chart for Healthy vs. Unhealthy Predictions
labels = ['Healthy', 'Unhealthy']
unique, counts = np.unique(y_pred_classes, return_counts=True)

plt.figure(figsize=(6, 4))
plt.bar(labels, counts, color=['green', 'red'])
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Prediction Distribution (Healthy vs Unhealthy)')
plt.show()

# 11. Training Loss and Accuracy Plot
plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training vs Validation Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('Training vs Validation Accuracy')
plt.legend()

plt.show()
